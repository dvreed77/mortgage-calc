{"version":3,"sources":["App.js","index.js"],"names":["CustomTooltip","payload","label","active","p","console","log","t","Math","floor","data","toString","replace","className","Chart","P","A","i","r","pow","pFunc","data2","Array","from","length","map","_","style","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","interval","tickFormatter","value","content","type","stroke","fill","monthlyPayment","loanAmount","nPayments","interestRate","monthlyRate","Equation","interestRateFixed","toFixed","math","App","useState","setLoanAmount","setInterestRate","marginRight","size","formatter","min","max","step","onChange","tipFormatter","parser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f17dd389.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { Input, Slider, InputNumber } from \"antd\";\n// import katex from \"katex\";\nimport \"katex/dist/katex.min.css\";\nimport { InlineMath, BlockMath } from \"react-katex\";\nimport {\n  LineChart,\n  AreaChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  Legend\n} from \"recharts\";\n\nfunction pFunc(P, A, i) {\n  return function p(t) {\n    const r = 1 + i / 12;\n    return P * Math.pow(r, t) - (A * (Math.pow(r, t) - 1)) / (r - 1);\n  };\n}\n\nfunction CustomTooltip({ payload, label, active }) {\n  if (active) {\n    // console.log(, label, active);\n    const p = payload[0].payload;\n    console.log();\n    const t = Math.floor(p.data)\n      .toString()\n      .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return (\n      <div className=\"custom-tooltip\">\n        <div>\n          <span className=\"text-gray-800\">Month:</span> {p.t}\n        </div>\n        <div>\n          <span className=\"text-gray-800\">Amount Left:</span> ${t}\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}\n\nconst Chart = ({ P, A, i }) => {\n  const p = pFunc(P, A, i);\n  const data2 = Array.from({ length: 360 }).map((_, t) => ({\n    t,\n    data: p(t)\n  }));\n\n  return (\n    <div className=\"mt-4\" style={{ width: \"100%\", height: 300 }}>\n      <ResponsiveContainer>\n        <AreaChart\n          data={data2}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 30,\n            bottom: 5\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"t\"\n            interval={11}\n            tickFormatter={value => Math.floor(value / 12)}\n          />\n          <YAxis\n            tickFormatter={value =>\n              `$${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n            }\n          />\n          <Tooltip content={<CustomTooltip />} />\n          {/* <Legend /> */}\n          <Area\n            type=\"monotone\"\n            dataKey=\"data\"\n            stroke=\"#91d5ff\"\n            fill=\"#91d5ff\"\n          />\n\n          {/* <Line\n            type=\"monotone\"\n            dataKey=\"data\"\n            stroke=\"#8884d8\"\n            // activeDot={{ r: 8 }}\n          /> */}\n        </AreaChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nfunction monthlyPayment(loanAmount, nPayments, interestRate) {\n  const monthlyRate = interestRate / 100 / 12;\n\n  const numerator = monthlyRate * Math.pow(1 + monthlyRate, nPayments);\n  const denominator = Math.pow(1 + monthlyRate, nPayments) - 1;\n  return (loanAmount * numerator) / denominator;\n}\n\nconst Equation = ({ className, loanAmount, interestRate }) => {\n  const interestRateFixed = (interestRate / 100).toFixed(3);\n  const monthlyRate = (interestRate / 100 / 12).toFixed(5);\n\n  return (\n    <div className={className}>\n      <BlockMath math={`A = \\\\text{monthly payment amount}`} />\n      <BlockMath math={`P = \\\\text{loan amount} = ${loanAmount}`} />\n      <BlockMath\n        math={`i = \\\\text{monthly interest rate} = \\\\frac{${interestRateFixed}}{12} = ${monthlyRate}`}\n      />\n      <BlockMath math={`n = \\\\text{number of payments} = 360`} />\n      <hr />\n      <BlockMath\n        math={`A = P\\\\left(\\\\frac{i(1 + i)^n}{(1 + i)^n - 1}\\\\right)`}\n      />\n    </div>\n  );\n};\n\nfunction App() {\n  const [loanAmount, setLoanAmount] = useState(500000);\n  const [nPayments, setNPayments] = useState(360);\n  const [interestRate, setInterestRate] = useState(4.5);\n\n  return (\n    <div className=\"container mx-auto\">\n      <h1 className=\"text-gray-800 text-2xl mb-6\">Mortgage Calculator</h1>\n\n      <div className=\"flex flex-row\">\n        <div className=\"flex flex-col w-1/2 mt-6\">\n          <div className=\"relative border-solid border-t border-gray-200 pt-3 mb-4\">\n            <h2\n              style={{ top: -13 }}\n              className=\"text-gray-600 absolute bg-white pr-2\"\n            >\n              Loan Amount\n            </h2>\n            <div className=\"flex flex-row mb-3\">\n              <InputNumber\n                style={{ width: \"8rem\", marginRight: \"1rem\" }}\n                size=\"large\"\n                formatter={value =>\n                  `$${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n                }\n                min={100000}\n                max={2000000}\n                step={10000}\n                value={loanAmount}\n                onChange={setLoanAmount}\n              />\n\n              <Slider\n                className=\"flex-grow\"\n                tipFormatter={value =>\n                  `$${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n                }\n                min={100000}\n                max={2000000}\n                step={10000}\n                value={loanAmount}\n                onChange={setLoanAmount}\n              />\n            </div>\n          </div>\n\n          <div className=\"relative border-solid border-t border-gray-200 pt-3 mb-4\">\n            <h2\n              style={{ top: -13 }}\n              className=\"text-gray-600 absolute bg-white pr-2\"\n            >\n              Interest Rate\n            </h2>\n            <div className=\"flex flex-row mb-3\">\n              <InputNumber\n                style={{ width: \"8rem\", marginRight: \"1rem\" }}\n                size=\"large\"\n                formatter={value => `${value}%`}\n                parser={value => value.replace(\"%\", \"\")}\n                min={1}\n                max={10}\n                step={0.1}\n                value={interestRate}\n                onChange={setInterestRate}\n              />\n              <Slider\n                className=\"flex-grow\"\n                tipFormatter={value => `${value}%`}\n                min={1}\n                max={10}\n                step={0.1}\n                value={interestRate}\n                onChange={setInterestRate}\n              />\n            </div>\n          </div>\n          <h2 className=\"text-gray-600 mb-0\">Monthly Payment</h2>\n          <h1 className=\"text-5xl text-gray-700\">\n            {`$${monthlyPayment(loanAmount, nPayments, interestRate).toFixed(\n              0\n            )}`}\n          </h1>\n        </div>\n\n        <Equation\n          className=\"mx-auto text-base text-gray-700 bg-gray-100 py-4 px-10 rounded-lg\"\n          loanAmount={loanAmount}\n          interestRate={interestRate}\n        />\n      </div>\n\n      <Chart\n        P={loanAmount}\n        A={monthlyPayment(loanAmount, nPayments, interestRate)}\n        i={interestRate / 100}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}